package actions

import (
	"github.com/go-saloon/saloon/models"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Category)
// DB Table: Plural (categories)
// Resource: Plural (Categories)
// Path: Plural (/categories)
// View Template Folder: Plural (/templates/categories/)

// CategoriesResource is the resource for the Category model
type CategoriesResource struct {
	buffalo.Resource
}

func CategoriesIndex(c buffalo.Context) error {
	tx := c.Value("tx").(*pop.Connection)
	cats := &models.Categories{}
	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())
	// Retrieve all Categories from the DB
	if err := q.All(cats); err != nil {
		return errors.WithStack(err)
	}
	// Make categories available inside the html template
	c.Set("categories", cats)
	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)
	return c.Render(200, r.HTML("categories/index"))
}

func CategoriesCreateGet(c buffalo.Context) error {
	c.Set("category", &models.Category{})
	return c.Render(200, r.HTML("categories/create"))
}

func CategoriesCreatePost(c buffalo.Context) error {
	// Allocate an empty Category
	cat := &models.Category{}
	// Bind post to the html form elements
	if err := c.Bind(cat); err != nil {
		return errors.WithStack(err)
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(cat)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		c.Set("category", cat)
		c.Set("errors", verrs.Errors)
		return c.Render(422, r.HTML("categories/create"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "New category added successfully.")
	// and redirect to the index page
	return c.Redirect(302, "/categories/index")
}

// CategoriesDetail displays the list of topics in a category
func CategoriesDetail(c buffalo.Context) error {
	tx := c.Value("tx").(*pop.Connection)
	cat := &models.Category{}
	if err := tx.Find(cat, c.Param("cid")); err != nil {
		return c.Error(404, err)
	}
	c.Set("category", cat)
	topics := &models.Topics{}
	if err := tx.BelongsTo(cat).All(topics); err != nil {
		return c.Error(404, err)
	}
	c.Set("topics", topics)
	for i, t := range *topics {
		topic, err := loadTopic(c, t.ID.String())
		if err != nil {
			return errors.WithStack(err)
		}
		(*topics)[i] = *topic
	}
	return c.Render(200, r.HTML("categories/detail"))
}

/*
// List gets all Categories. This function is mapped to the path
// GET /categories
func (v CategoriesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	categories := &models.Categories{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Categories from the DB
	if err := q.All(categories); err != nil {
		return errors.WithStack(err)
	}

	// Make Categories available inside the html template
	c.Set("categories", categories)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.HTML("categories/index.html"))
}

// Show gets the data for one Category. This function is mapped to
// the path GET /categories/{category_id}
func (v CategoriesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Category
	category := &models.Category{}

	// To find the Category the parameter category_id is used.
	if err := tx.Find(category, c.Param("category_id")); err != nil {
		return c.Error(404, err)
	}

	// Make category available inside the html template
	c.Set("category", category)

	return c.Render(200, r.HTML("categories/show.html"))
}

// New renders the form for creating a new Category.
// This function is mapped to the path GET /categories/new
func (v CategoriesResource) New(c buffalo.Context) error {
	// Make category available inside the html template
	c.Set("category", &models.Category{})

	return c.Render(200, r.HTML("categories/new.html"))
}

// Create adds a Category to the DB. This function is mapped to the
// path POST /categories
func (v CategoriesResource) Create(c buffalo.Context) error {
	// Allocate an empty Category
	category := &models.Category{}

	// Bind category to the html form elements
	if err := c.Bind(category); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(category)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make category available inside the html template
		c.Set("category", category)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("categories/new.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Category was created successfully")

	// and redirect to the categories index page
	return c.Redirect(302, "/categories/%s", category.ID)
}

// Edit renders a edit form for a Category. This function is
// mapped to the path GET /categories/{category_id}/edit
func (v CategoriesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Category
	category := &models.Category{}

	if err := tx.Find(category, c.Param("category_id")); err != nil {
		return c.Error(404, err)
	}

	// Make category available inside the html template
	c.Set("category", category)
	return c.Render(200, r.HTML("categories/edit.html"))
}

// Update changes a Category in the DB. This function is mapped to
// the path PUT /categories/{category_id}
func (v CategoriesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Category
	category := &models.Category{}

	if err := tx.Find(category, c.Param("category_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Category to the html form elements
	if err := c.Bind(category); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(category)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make category available inside the html template
		c.Set("category", category)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("categories/edit.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Category was updated successfully")

	// and redirect to the categories index page
	return c.Redirect(302, "/categories/%s", category.ID)
}

// Destroy deletes a Category from the DB. This function is mapped
// to the path DELETE /categories/{category_id}
func (v CategoriesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Category
	category := &models.Category{}

	// To find the Category the parameter category_id is used.
	if err := tx.Find(category, c.Param("category_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(category); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Category was destroyed successfully")

	// Redirect to the categories index page
	return c.Redirect(302, "/categories")
}
*/
